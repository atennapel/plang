const id = (x => x);
const const_ = (x => (y => x));
const constid = const_(id);
const comp = (f => (g => (x => f(g(x)))));
const dup = (f => (x => f(x)(x)));
const flip = (f => (x => (y => f(y)(x))));
const fork = (f => (g => (h => (x => f(g(x))(h(x))))));
const void_ = (x => x);
const unit = id;
const unBool = (f => f);
const true_ = (a => (b => a));
const false_ = (a => (b => b));
const cond = (c => (a => (b => unBool(c)(a)(b))));
const if_ = (c => (a => (b => cond(c)(a)(b)(unit))));
const unPair = (f => f);
const pair = (a => (b => (f => f(a)(b))));
const fst = (p => unPair(p)(const_));
const snd = (p => unPair(p)(constid));
const unSum = (f => f);
const inl = (x => (f => (g => f(x))));
const inr = (x => (f => (g => g(x))));
const caseSum = (f => (g => (s => unSum(s)(f)(g))));
const unMaybe = (s => s);
const nothing = inl(unit);
const just = (x => inr(x));
const caseMaybe = (m => unSum(unMaybe(m)));
const unFix = (f => f);
const unMu = (f => f);
const nu = (a => (f => pair(a)(f)));
const munit = (p => fst(p));
const mappend = (p => snd(p));
const map = (f => f);
const unListF = (s => s);
const unList = (m => m);
const nil = (f => f(inl(unit)));
const cons = (h => (t => (f => f(inr(pair(h)(unMu(unList(t))(f)))))));
const unNat = (f => f);
const foldNat = (s => (z => (n => unNat(n)(s)(z))));
const z = (f => (x => x));
const s = (n => (f => (x => f(foldNat(f)(x)(n)))));
const _0 = z;
const _1 = s(_0);
const _2 = s(_1);
const _3 = s(_2);
const _4 = s(_3);
const _5 = s(_4);
const _6 = s(_5);
const _7 = s(_6);
const _8 = s(_7);
const _9 = s(_8);
const add = (m => (n => (f => (x => foldNat(f)(foldNat(f)(x)(n))(m)))));
const mul = (m => (n => (f => (x => foldNat(unNat(n)(f))(x)(m)))));
const exp = (m => (n => unNat(n)(unNat(m))));
const pred = (n => (f => (x => unNat(n)((g => (h => h(g(f)))))((u => x))(id))));
