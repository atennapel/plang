
> bidir@1.0.0 index C:\Users\Albert\git\plang
> node build/src/index.js

(\x -> (let y = (flip Unit) in (flip2 Unit)))
synthVal (\x -> (let y = (flip Unit) in (flip2 Unit))) in [kind Type, kind Effs, kind Eff, Flip :k Eff, Flip2 :k Eff, Unit :k Type, Unit : Unit, flip : (Unit -> Unit!{ Flip | {} }), flip2 : (Unit -> Unit!{ Flip2 | {} }), |>m$0]
checkComp (let y = (flip Unit) in (flip2 Unit)) : ^t$4!^e$5 in [kind Type, kind Effs, kind Eff, Flip :k Eff, Flip2 :k Eff, Unit :k Type, Unit : Unit, flip : (Unit -> Unit!{ Flip | {} }), flip2 : (Unit -> Unit!{ Flip2 | {} }), |>m$0, |>m$1, ^x$3 :k Type, ^e$5 :k Effs, ^t$4 :k Type, x$2 : ^x$3]
synthComp (flip Unit) in [kind Type, kind Effs, kind Eff, Flip :k Eff, Flip2 :k Eff, Unit :k Type, Unit : Unit, flip : (Unit -> Unit!{ Flip | {} }), flip2 : (Unit -> Unit!{ Flip2 | {} }), |>m$0, |>m$1, ^x$3 :k Type, ^e$5 :k Effs, ^t$4 :k Type, x$2 : ^x$3]
synthVal flip in [kind Type, kind Effs, kind Eff, Flip :k Eff, Flip2 :k Eff, Unit :k Type, Unit : Unit, flip : (Unit -> Unit!{ Flip | {} }), flip2 : (Unit -> Unit!{ Flip2 | {} }), |>m$0, |>m$1, ^x$3 :k Type, ^e$5 :k Effs, ^t$4 :k Type, x$2 : ^x$3]
synthVal done flip : (Unit -> Unit!{ Flip | {} }) in [kind Type, kind Effs, kind Eff, Flip :k Eff, Flip2 :k Eff, Unit :k Type, Unit : Unit, flip : (Unit -> Unit!{ Flip | {} }), flip2 : (Unit -> Unit!{ Flip2 | {} }), |>m$0, |>m$1, ^x$3 :k Type, ^e$5 :k Effs, ^t$4 :k Type, x$2 : ^x$3]
synthapp (Unit -> Unit!{ Flip | {} }) @ Unit in [kind Type, kind Effs, kind Eff, Flip :k Eff, Flip2 :k Eff, Unit :k Type, Unit : Unit, flip : (Unit -> Unit!{ Flip | {} }), flip2 : (Unit -> Unit!{ Flip2 | {} }), |>m$0, |>m$1, ^x$3 :k Type, ^e$5 :k Effs, ^t$4 :k Type, x$2 : ^x$3]
checkVal Unit : Unit in [kind Type, kind Effs, kind Eff, Flip :k Eff, Flip2 :k Eff, Unit :k Type, Unit : Unit, flip : (Unit -> Unit!{ Flip | {} }), flip2 : (Unit -> Unit!{ Flip2 | {} }), |>m$0, |>m$1, ^x$3 :k Type, ^e$5 :k Effs, ^t$4 :k Type, x$2 : ^x$3]
synthVal Unit in [kind Type, kind Effs, kind Eff, Flip :k Eff, Flip2 :k Eff, Unit :k Type, Unit : Unit, flip : (Unit -> Unit!{ Flip | {} }), flip2 : (Unit -> Unit!{ Flip2 | {} }), |>m$0, |>m$1, ^x$3 :k Type, ^e$5 :k Effs, ^t$4 :k Type, x$2 : ^x$3]
synthVal done Unit : Unit in [kind Type, kind Effs, kind Eff, Flip :k Eff, Flip2 :k Eff, Unit :k Type, Unit : Unit, flip : (Unit -> Unit!{ Flip | {} }), flip2 : (Unit -> Unit!{ Flip2 | {} }), |>m$0, |>m$1, ^x$3 :k Type, ^e$5 :k Effs, ^t$4 :k Type, x$2 : ^x$3]
subsume Unit <: Unit in [kind Type, kind Effs, kind Eff, Flip :k Eff, Flip2 :k Eff, Unit :k Type, Unit : Unit, flip : (Unit -> Unit!{ Flip | {} }), flip2 : (Unit -> Unit!{ Flip2 | {} }), |>m$0, |>m$1, ^x$3 :k Type, ^e$5 :k Effs, ^t$4 :k Type, x$2 : ^x$3]
synthapp done (Unit -> Unit!{ Flip | {} }) @ Unit => Unit!{ Flip | {} } in [kind Type, kind Effs, kind Eff, Flip :k Eff, Flip2 :k Eff, Unit :k Type, Unit : Unit, flip : (Unit -> Unit!{ Flip | {} }), flip2 : (Unit -> Unit!{ Flip2 | {} }), |>m$0, |>m$1, ^x$3 :k Type, ^e$5 :k Effs, ^t$4 :k Type, x$2 : ^x$3]
synthComp done (flip Unit) : Unit!{ Flip | {} } in [kind Type, kind Effs, kind Eff, Flip :k Eff, Flip2 :k Eff, Unit :k Type, Unit : Unit, flip : (Unit -> Unit!{ Flip | {} }), flip2 : (Unit -> Unit!{ Flip2 | {} }), |>m$0, |>m$1, ^x$3 :k Type, ^e$5 :k Effs, ^t$4 :k Type, x$2 : ^x$3]
subsume { Flip | {} } <: ^e$5 in [kind Type, kind Effs, kind Eff, Flip :k Eff, Flip2 :k Eff, Unit :k Type, Unit : Unit, flip : (Unit -> Unit!{ Flip | {} }), flip2 : (Unit -> Unit!{ Flip2 | {} }), |>m$0, |>m$1, ^x$3 :k Type, ^e$5 :k Effs, ^t$4 :k Type, x$2 : ^x$3]
instR e$5 := { Flip | {} } in [kind Type, kind Effs, kind Eff, Flip :k Eff, Flip2 :k Eff, Unit :k Type, Unit : Unit, flip : (Unit -> Unit!{ Flip | {} }), flip2 : (Unit -> Unit!{ Flip2 | {} }), |>m$0, |>m$1, ^x$3 :k Type, ^e$5 :k Effs, ^t$4 :k Type, x$2 : ^x$3]
solve e$5 = { Flip | {} } in [kind Type, kind Effs, kind Eff, Flip :k Eff, Flip2 :k Eff, Unit :k Type, Unit : Unit, flip : (Unit -> Unit!{ Flip | {} }), flip2 : (Unit -> Unit!{ Flip2 | {} }), |>m$0, |>m$1, ^x$3 :k Type, ^e$5 :k Effs, ^t$4 :k Type, x$2 : ^x$3]
checkComp (flip2 Unit) : ^t$4!^e$5 in [kind Type, kind Effs, kind Eff, Flip :k Eff, Flip2 :k Eff, Unit :k Type, Unit : Unit, flip : (Unit -> Unit!{ Flip | {} }), flip2 : (Unit -> Unit!{ Flip2 | {} }), |>m$0, |>m$1, ^x$3 :k Type, ^e$5 :k Effs = { Flip | {} }, ^t$4 :k Type, x$2 : ^x$3, |>wm$7, y$6 : Unit]
synthComp (flip2 Unit) in [kind Type, kind Effs, kind Eff, Flip :k Eff, Flip2 :k Eff, Unit :k Type, Unit : Unit, flip : (Unit -> Unit!{ Flip | {} }), flip2 : (Unit -> Unit!{ Flip2 | {} }), |>m$0, |>m$1, ^x$3 :k Type, ^e$5 :k Effs = { Flip | {} }, ^t$4 :k Type, x$2 : ^x$3, |>wm$7, y$6 : Unit]
synthVal flip2 in [kind Type, kind Effs, kind Eff, Flip :k Eff, Flip2 :k Eff, Unit :k Type, Unit : Unit, flip : (Unit -> Unit!{ Flip | {} }), flip2 : (Unit -> Unit!{ Flip2 | {} }), |>m$0, |>m$1, ^x$3 :k Type, ^e$5 :k Effs = { Flip | {} }, ^t$4 :k Type, x$2 : ^x$3, |>wm$7, y$6 : Unit]
synthVal done flip2 : (Unit -> Unit!{ Flip2 | {} }) in [kind Type, kind Effs, kind Eff, Flip :k Eff, Flip2 :k Eff, Unit :k Type, Unit : Unit, flip : (Unit -> Unit!{ Flip | {} }), flip2 : (Unit -> Unit!{ Flip2 | {} }), |>m$0, |>m$1, ^x$3 :k Type, ^e$5 :k Effs = { Flip | {} }, ^t$4 :k Type, x$2 : ^x$3, |>wm$7, y$6 : Unit]
synthapp (Unit -> Unit!{ Flip2 | {} }) @ Unit in [kind Type, kind Effs, kind Eff, Flip :k Eff, Flip2 :k Eff, Unit :k Type, Unit : Unit, flip : (Unit -> Unit!{ Flip | {} }), flip2 : (Unit -> Unit!{ Flip2 | {} }), |>m$0, |>m$1, ^x$3 :k Type, ^e$5 :k Effs = { Flip | {} }, ^t$4 :k Type, x$2 : ^x$3, |>wm$7, y$6 : Unit]
checkVal Unit : Unit in [kind Type, kind Effs, kind Eff, Flip :k Eff, Flip2 :k Eff, Unit :k Type, Unit : Unit, flip : (Unit -> Unit!{ Flip | {} }), flip2 : (Unit -> Unit!{ Flip2 | {} }), |>m$0, |>m$1, ^x$3 :k Type, ^e$5 :k Effs = { Flip | {} }, ^t$4 :k Type, x$2 : ^x$3, |>wm$7, y$6 : Unit]
synthVal Unit in [kind Type, kind Effs, kind Eff, Flip :k Eff, Flip2 :k Eff, Unit :k Type, Unit : Unit, flip : (Unit -> Unit!{ Flip | {} }), flip2 : (Unit -> Unit!{ Flip2 | {} }), |>m$0, |>m$1, ^x$3 :k Type, ^e$5 :k Effs = { Flip | {} }, ^t$4 :k Type, x$2 : ^x$3, |>wm$7, y$6 : Unit]
synthVal done Unit : Unit in [kind Type, kind Effs, kind Eff, Flip :k Eff, Flip2 :k Eff, Unit :k Type, Unit : Unit, flip : (Unit -> Unit!{ Flip | {} }), flip2 : (Unit -> Unit!{ Flip2 | {} }), |>m$0, |>m$1, ^x$3 :k Type, ^e$5 :k Effs = { Flip | {} }, ^t$4 :k Type, x$2 : ^x$3, |>wm$7, y$6 : Unit]
subsume Unit <: Unit in [kind Type, kind Effs, kind Eff, Flip :k Eff, Flip2 :k Eff, Unit :k Type, Unit : Unit, flip : (Unit -> Unit!{ Flip | {} }), flip2 : (Unit -> Unit!{ Flip2 | {} }), |>m$0, |>m$1, ^x$3 :k Type, ^e$5 :k Effs = { Flip | {} }, ^t$4 :k Type, x$2 : ^x$3, |>wm$7, y$6 : Unit]
synthapp done (Unit -> Unit!{ Flip2 | {} }) @ Unit => Unit!{ Flip2 | {} } in [kind Type, kind Effs, kind Eff, Flip :k Eff, Flip2 :k Eff, Unit :k Type, Unit : Unit, flip : (Unit -> Unit!{ Flip | {} }), flip2 : (Unit -> Unit!{ Flip2 | {} }), |>m$0, |>m$1, ^x$3 :k Type, ^e$5 :k Effs = { Flip | {} }, ^t$4 :k Type, x$2 : ^x$3, |>wm$7, y$6 : Unit]
synthComp done (flip2 Unit) : Unit!{ Flip2 | {} } in [kind Type, kind Effs, kind Eff, Flip :k Eff, Flip2 :k Eff, Unit :k Type, Unit : Unit, flip : (Unit -> Unit!{ Flip | {} }), flip2 : (Unit -> Unit!{ Flip2 | {} }), |>m$0, |>m$1, ^x$3 :k Type, ^e$5 :k Effs = { Flip | {} }, ^t$4 :k Type, x$2 : ^x$3, |>wm$7, y$6 : Unit]
subsume Unit <: ^t$4 in [kind Type, kind Effs, kind Eff, Flip :k Eff, Flip2 :k Eff, Unit :k Type, Unit : Unit, flip : (Unit -> Unit!{ Flip | {} }), flip2 : (Unit -> Unit!{ Flip2 | {} }), |>m$0, |>m$1, ^x$3 :k Type, ^e$5 :k Effs = { Flip | {} }, ^t$4 :k Type, x$2 : ^x$3, |>wm$7, y$6 : Unit]
instR t$4 := Unit in [kind Type, kind Effs, kind Eff, Flip :k Eff, Flip2 :k Eff, Unit :k Type, Unit : Unit, flip : (Unit -> Unit!{ Flip | {} }), flip2 : (Unit -> Unit!{ Flip2 | {} }), |>m$0, |>m$1, ^x$3 :k Type, ^e$5 :k Effs = { Flip | {} }, ^t$4 :k Type, x$2 : ^x$3, |>wm$7, y$6 : Unit]
solve t$4 = Unit in [kind Type, kind Effs, kind Eff, Flip :k Eff, Flip2 :k Eff, Unit :k Type, Unit : Unit, flip : (Unit -> Unit!{ Flip | {} }), flip2 : (Unit -> Unit!{ Flip2 | {} }), |>m$0, |>m$1, ^x$3 :k Type, ^e$5 :k Effs = { Flip | {} }, ^t$4 :k Type, x$2 : ^x$3, |>wm$7, y$6 : Unit]
subsume { Flip2 | {} } <: { Flip | {} } in [kind Type, kind Effs, kind Eff, Flip :k Eff, Flip2 :k Eff, Unit :k Type, Unit : Unit, flip : (Unit -> Unit!{ Flip | {} }), flip2 : (Unit -> Unit!{ Flip2 | {} }), |>m$0, |>m$1, ^x$3 :k Type, ^e$5 :k Effs = { Flip | {} }, ^t$4 :k Type = Unit, x$2 : ^x$3, |>wm$7, y$6 : Unit]
rewriteEffs Flip2 in { Flip | {} } in [kind Type, kind Effs, kind Eff, Flip :k Eff, Flip2 :k Eff, Unit :k Type, Unit : Unit, flip : (Unit -> Unit!{ Flip | {} }), flip2 : (Unit -> Unit!{ Flip2 | {} }), |>m$0, |>m$1, ^x$3 :k Type, ^e$5 :k Effs = { Flip | {} }, ^t$4 :k Type = Unit, x$2 : ^x$3, |>wm$7, y$6 : Unit]
rewriteEffs Flip2 in {} in [kind Type, kind Effs, kind Eff, Flip :k Eff, Flip2 :k Eff, Unit :k Type, Unit : Unit, flip : (Unit -> Unit!{ Flip | {} }), flip2 : (Unit -> Unit!{ Flip2 | {} }), |>m$0, |>m$1, ^x$3 :k Type, ^e$5 :k Effs = { Flip | {} }, ^t$4 :k Type = Unit, x$2 : ^x$3, |>wm$7, y$6 : Unit]
subsume Flip2 <: Flip2 in [kind Type, kind Effs, kind Eff, Flip :k Eff, Flip2 :k Eff, Unit :k Type, Unit : Unit, flip : (Unit -> Unit!{ Flip | {} }), flip2 : (Unit -> Unit!{ Flip2 | {} }), |>m$0, |>m$1, ^x$3 :k Type, ^e$5 :k Effs = { Flip | {} }, ^t$4 :k Type = Unit, x$2 : ^x$3, |>wm$7, y$6 : Unit]
subsume {} <: { Flip | {} } in [kind Type, kind Effs, kind Eff, Flip :k Eff, Flip2 :k Eff, Unit :k Type, Unit : Unit, flip : (Unit -> Unit!{ Flip | {} }), flip2 : (Unit -> Unit!{ Flip2 | {} }), |>m$0, |>m$1, ^x$3 :k Type, ^e$5 :k Effs = { Flip | {} }, ^t$4 :k Type = Unit, x$2 : ^x$3, |>wm$7, y$6 : Unit]
subsume ^r$8 <: { Flip | {} } in [kind Type, kind Effs, kind Eff, Flip :k Eff, Flip2 :k Eff, Unit :k Type, Unit : Unit, flip : (Unit -> Unit!{ Flip | {} }), flip2 : (Unit -> Unit!{ Flip2 | {} }), |>m$0, |>m$1, ^x$3 :k Type, ^e$5 :k Effs = { Flip | {} }, ^t$4 :k Type = Unit, x$2 : ^x$3, |>wm$7, y$6 : Unit, ^r$8 :k Effs]
instL r$8 := { Flip | {} } in [kind Type, kind Effs, kind Eff, Flip :k Eff, Flip2 :k Eff, Unit :k Type, Unit : Unit, flip : (Unit -> Unit!{ Flip | {} }), flip2 : (Unit -> Unit!{ Flip2 | {} }), |>m$0, |>m$1, ^x$3 :k Type, ^e$5 :k Effs = { Flip | {} }, ^t$4 :k Type = Unit, x$2 : ^x$3, |>wm$7, y$6 : Unit, ^r$8 :k Effs]
solve r$8 = { Flip | {} } in [kind Type, kind Effs, kind Eff, Flip :k Eff, Flip2 :k Eff, Unit :k Type, Unit : Unit, flip : (Unit -> Unit!{ Flip | {} }), flip2 : (Unit -> Unit!{ Flip2 | {} }), |>m$0, |>m$1, ^x$3 :k Type, ^e$5 :k Effs = { Flip | {} }, ^t$4 :k Type = Unit, x$2 : ^x$3, |>wm$7, y$6 : Unit, ^r$8 :k Effs]
gen: (^x$3 -> Unit!{ Flip | {} }) in [kind Type, kind Effs, kind Eff, Flip :k Eff, Flip2 :k Eff, Unit :k Type, Unit : Unit, flip : (Unit -> Unit!{ Flip | {} }), flip2 : (Unit -> Unit!{ Flip2 | {} }), |>m$0, |>m$1, ^x$3 :k Type, ^e$5 :k Effs = { Flip | {} }, ^t$4 :k Type = Unit, x$2 : ^x$3]
gen done: (forall(x$3 : Type). (x$3 -> Unit!{ Flip | {} })) in [kind Type, kind Effs, kind Eff, Flip :k Eff, Flip2 :k Eff, Unit :k Type, Unit : Unit, flip : (Unit -> Unit!{ Flip | {} }), flip2 : (Unit -> Unit!{ Flip2 | {} }), |>m$0]
synthVal done (\x -> (let y = (flip Unit) in (flip2 Unit))) : (forall(x$3 : Type). (x$3 -> Unit!{ Flip | {} })) in [kind Type, kind Effs, kind Eff, Flip :k Eff, Flip2 :k Eff, Unit :k Type, Unit : Unit, flip : (Unit -> Unit!{ Flip | {} }), flip2 : (Unit -> Unit!{ Flip2 | {} }), |>m$0]
gen: (forall(x$3 : Type). (x$3 -> Unit!{ Flip | {} })) in [kind Type, kind Effs, kind Eff, Flip :k Eff, Flip2 :k Eff, Unit :k Type, Unit : Unit, flip : (Unit -> Unit!{ Flip | {} }), flip2 : (Unit -> Unit!{ Flip2 | {} }), |>m$0]
gen done: (forall(x$3 : Type). (x$3 -> Unit!{ Flip | {} })) in [kind Type, kind Effs, kind Eff, Flip :k Eff, Flip2 :k Eff, Unit :k Type, Unit : Unit, flip : (Unit -> Unit!{ Flip | {} }), flip2 : (Unit -> Unit!{ Flip2 | {} })]
Right((forall(x$3 : Type). (x$3 -> Unit!{ Flip | {} })))
