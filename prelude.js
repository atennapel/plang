[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[ 'strMonoid' ]
[]
[]
[]
[ 'strMonoid' ]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[ { type: { tag: 'TApp', left: [Object], right: [Object], kind: [Object] },
    env: 
     { typings: [Object],
       types: [Object],
       cases: [Object],
       impl: [Object],
       constraints: [Object],
       constraintsl: 0 } } ]
[]
[]
[]
[]
[]
[]
[]
[ { type: { tag: 'TApp', left: [Object], right: [Object], kind: [Object] },
    env: 
     { typings: [Object],
       types: [Object],
       cases: [Object],
       impl: [Object],
       constraints: [Object],
       constraintsl: 0 } } ]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
(function() {var Nil = new _FO("Nil");var Cons = _u0 => _u1 => new _FO("Cons", [_u0, _u1]);return((function() {var list = arrFoldr((l => (x => Cons(x)(l))))(Nil);return((function() {var listMap = (f => _case({"Nil": (_ => Nil), "Cons": (h => (t => Cons(f(h))(listMap(f)(t))))}));return((function() {var listFoldl = (f => (v => _case({"Nil": (_ => v), "Cons": (h => (t => listFoldl(f)(f(v)(h))(t)))})));return((function() {var listFoldr = (f => (v => _case({"Nil": (_ => v), "Cons": (h => (t => f(listFoldr(f)(v)(t))(h)))})));return((function() {var listAppend = _case({"Nil": (_ => id), "Cons": (h => (t => (x => Cons(h)(listAppend(t)(x)))))});return((function() {var Monoid = _u0 => new _FO("Monoid", [_u0]);return((function() {var append = (d => _case({"Monoid": (x => _sel("append")(x))})(d));return((function() {var unit = (d => _case({"Monoid": (x => _sel("unit")(x))})(d));return((function() {var floatPlusMonoid = Monoid(({"append": add, "unit": 0}));return((function() {var floatMultMonoid = Monoid(({"append": mul, "unit": 1}));return((function() {var strMonoid = Monoid(({"append": strAppend, "unit": ""}));return((function() {var arrMonoid = Monoid(({"append": arrAppend, "unit": []}));return((function() {var listMonoid = Monoid(({"append": listAppend, "unit": Nil}));return((function() {var Show = _u0 => new _FO("Show", [_u0]);return((function() {var show = (d => _case({"Show": id})(d));return((function() {var floatShow = Show(floatToString);return((function() {var strShow = Show(id);return((function() {var arrShow = (showD => Show((a => append(strMonoid)("[")(append(strMonoid)(arrJoin(", ")(arrMap(show(showD))(a)))("]")))));return((function() {var listShow = (showD => Show(_case({"Nil": k("Nil"), "Cons": (h => (t => append([object Object])(show(showD)(h))(append([object Object])(" : ")(show(listShow(showD))(t)))))})));return(({"Nil": Nil, "Cons": Cons, "list": list, "listMap": listMap, "listFoldl": listFoldl, "listFoldr": listFoldr, "Show": Show, "show": show, "implicit_floatShow": floatShow, "implicit_strShow": strShow, "implicit_arrShow": arrShow, "implicit_listShow": listShow, "Monoid": Monoid, "append": append, "unit": unit, "implicit_floatPlusMonod": floatPlusMonoid, "implicit_floatMultMonoid": floatMultMonoid, "implicit_strMonoid": strMonoid, "implicit_arrMonoid": arrMonoid, "implicit_listMonoid": listMonoid}))})())})())})())})())})())})())})())})())})())})())})())})())})())})())})())})())})())})())})())})()
