infer: type Show t1 = Show (t1 -> Str) in (let show = (\d => (case {Show -> id} d)) in type List t = Nil  | Cons (t) (List t) in (ilet floatShow = (Show floatToString) in (iletr listShow = (\showD => (Show case {Nil -> (k "Nil"), Cons -> (\h t -> ((strConcat ((show {showD}) h)) ((case {Show -> id} (listShow {showD})) t)))})) in (show (Nil : List Float)))))
infer: (let show = (\d => (case {Show -> id} d)) in type List t = Nil  | Cons (t) (List t) in (ilet floatShow = (Show floatToString) in (iletr listShow = (\showD => (Show case {Nil -> (k "Nil"), Cons -> (\h t -> ((strConcat ((show {showD}) h)) ((case {Show -> id} (listShow {showD})) t)))})) in (show (Nil : List Float)))))
infer: (\d => (case {Show -> id} d))
infer: (case {Show -> id} d)
infer: case {Show -> id}
unify: t2 and Show t3
infer: id
unify: (t3 -> Str) -> r and a1 -> a1
unify: -> (t3 -> Str) and -> a1
unify: -> and ->
unify: t3 -> Str and a1
unify: r and t3 -> Str
infer: d
unify: (Show t3) -> t3 -> Str and d -> r1
unify: -> (Show t3) and -> d
unify: -> and ->
unify: Show t3 and d
unify: t3 -> Str and r1
infer: type List t = Nil  | Cons (t) (List t) in (ilet floatShow = (Show floatToString) in (iletr listShow = (\showD => (Show case {Nil -> (k "Nil"), Cons -> (\h t -> ((strConcat ((show {showD}) h)) ((case {Show -> id} (listShow {showD})) t)))})) in (show (Nil : List Float))))
infer: (ilet floatShow = (Show floatToString) in (iletr listShow = (\showD => (Show case {Nil -> (k "Nil"), Cons -> (\h t -> ((strConcat ((show {showD}) h)) ((case {Show -> id} (listShow {showD})) t)))})) in (show (Nil : List Float))))
infer: (Show floatToString)
infer: Show
infer: floatToString
unify: (t4 -> Str) -> Show t4 and (Float -> Str) -> r2
unify: -> (t4 -> Str) and -> (Float -> Str)
unify: -> and ->
unify: t4 -> Str and Float -> Str
unify: -> t4 and -> Float
unify: -> and ->
unify: t4 and Float
unify: Str and Str
unify: Show Float and r2
infer: (iletr listShow = (\showD => (Show case {Nil -> (k "Nil"), Cons -> (\h t -> ((strConcat ((show {showD}) h)) ((case {Show -> id} (listShow {showD})) t)))})) in (show (Nil : List Float)))
infer: (\showD => (Show case {Nil -> (k "Nil"), Cons -> (\h t -> ((strConcat ((show {showD}) h)) ((case {Show -> id} (listShow {showD})) t)))}))
infer: (Show case {Nil -> (k "Nil"), Cons -> (\h t -> ((strConcat ((show {showD}) h)) ((case {Show -> id} (listShow {showD})) t)))})
infer: Show
infer: case {Nil -> (k "Nil"), Cons -> (\h t -> ((strConcat ((show {showD}) h)) ((case {Show -> id} (listShow {showD})) t)))}
unify: t6 and List t7
infer: (k "Nil")
infer: k
infer: "Nil"
unify: a2 -> b1 -> a2 and Str -> r4
unify: -> a2 and -> Str
unify: -> and ->
unify: a2 and Str
unify: b1 -> Str and r4
unify: () -> r3 and b1 -> Str
unify: -> () and -> b1
unify: -> and ->
unify: () and b1
unify: r3 and Str
infer: (\h t -> ((strConcat ((show {showD}) h)) ((case {Show -> id} (listShow {showD})) t)))
infer: (\t -> ((strConcat ((show {showD}) h)) ((case {Show -> id} (listShow {showD})) t)))
infer: ((strConcat ((show {showD}) h)) ((case {Show -> id} (listShow {showD})) t))
infer: (strConcat ((show {showD}) h))
infer: strConcat
infer: ((show {showD}) h)
infer: (show {showD})
infer: show
infer: showD
unify: (Show t9 => t9 -> Str) and (i => t1)
unify: Show t9 and i
unify: t9 -> Str and t1
unify: Show t9 and showD
infer: h
unify: t9 -> Str and h -> r5
unify: -> t9 and -> h
unify: -> and ->
unify: t9 and h
unify: Str and r5
unify: Str -> Str -> Str and Str -> r6
unify: -> Str and -> Str
unify: -> and ->
unify: Str and Str
unify: Str -> Str and r6
infer: ((case {Show -> id} (listShow {showD})) t)
infer: (case {Show -> id} (listShow {showD}))
infer: case {Show -> id}
unify: t12 and Show t13
infer: id
unify: (t13 -> Str) -> r7 and a3 -> a3
unify: -> (t13 -> Str) and -> a3
unify: -> and ->
unify: t13 -> Str and a3
unify: r7 and t13 -> Str
infer: (listShow {showD})
infer: listShow
infer: showD
unify: listShow and (i1 => t14)
unify: i1 and Show t11
unify: (Show t13) -> t13 -> Str and t14 -> r8
unify: -> (Show t13) and -> t14
unify: -> and ->
unify: Show t13 and t14
unify: t13 -> Str and r8
infer: t
unify: t13 -> Str and t8 -> r9
unify: -> t13 and -> t8
unify: -> and ->
unify: t13 and t8
unify: Str and r9
unify: Str -> Str and Str -> r1
unify: -> Str and -> Str
unify: -> and ->
unify: Str and Str
unify: Str and r1
unify: t7 -> (List t7) -> Str and t11 -> t15 -> Str
unify: -> t7 and -> t11
unify: -> and ->
unify: t7 and t11
unify: (List t16) -> Str and t15 -> Str
unify: -> (List t16) and -> t15
unify: -> and ->
unify: List t16 and t15
unify: Str and Str
unify: (t5 -> Str) -> Show t5 and ((List t16) -> Str) -> r11
unify: -> (t5 -> Str) and -> ((List t16) -> Str)
unify: -> and ->
unify: t5 -> Str and (List t16) -> Str
unify: -> t5 and -> (List t16)
unify: -> and ->
unify: t5 and List t16
unify: Str and Str
unify: Show (List t16) and r11
(Show t16 => Show (List t16))
(Show t16 => Show (List t16))
unify: (Show t16 => Show (List t16)) and (Show t16 => Show (List t16))
unify: Show t16 and Show t16
unify: Show and Show
unify: t16 and t16
unify: Show (List t16) and Show (List t16)
unify: Show and Show
unify: List t16 and List t16
unify: List and List
unify: t16 and t16
infer: (show (Nil : List Float))
infer: show
infer: (Nil : List Float)
infer: Nil
unify: List Float and List t18
unify: List and List
unify: Float and t18
unify: (Show t17 => t17 -> Str) and (List Float) -> r12
unify: t17 -> Str and (List Float) -> r12
unify: -> t17 and -> (List Float)
unify: -> and ->
unify: t17 and List Float
unify: Str and r12
Str
handleConstraints
c: Show t17
floatShow
unify: Show (List Float) and Show Float
unify: Show and Show
unify: List Float and Float
listShow
unify: Show (List Float) and (Show t19 => Show (List t19))
unify: Show (List t19) and Show (List Float)
unify: Show and Show
unify: List t19 and List Float
unify: List and List
unify: t19 and Float
handleConstraints
c: Show t19
floatShow
unify: Show Float and Show Float
unify: Show and Show
unify: Float and Float
listShow
unify: Show Float and (Show t2 => Show (List t2))
unify: Show (List t2) and Show Float
unify: Show and Show
unify: List t2 and Float
[ 'floatShow' ]
unify: Show Float and Show Float
unify: Show and Show
unify: Float and Float
[ 'listShow', 'floatShow' ]
unify: Show (List Float) and (Show t21 => Show (List t21))
unify: Show (List t21) and Show (List Float)
unify: Show and Show
unify: List t21 and List Float
unify: List and List
unify: t21 and Float
(function() {var Show = _u0 => new _FO("Show", [_u0]);return((function() {var show = (d => _case({"Show": id})(d));return((function() {var Nil = new _FO("Nil");var Cons = _u0 => _u1 => new _FO("Cons", [_u0, _u1]);return((function() {var floatShow = Show(floatToString);return((function() {var listShow = (showD => Show(_case({"Nil": k("Nil"), "Cons": (h => (t => strConcat(show(showD)(h))(_case({"Show": id})(listShow(showD))(t))))})));return(show(listShow([object Object]))(Nil))})())})())})())})())})()
